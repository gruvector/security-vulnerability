diff --git a/dist/build/webpack/plugins/next-types-plugin.js b/dist/build/webpack/plugins/next-types-plugin.js
index 8532ab035118a51359612910abbb415cec4ff5e8..03099021477cf30100213d51a1b380200405be0c 100644
--- a/dist/build/webpack/plugins/next-types-plugin.js
+++ b/dist/build/webpack/plugins/next-types-plugin.js
@@ -273,7 +273,7 @@ class NextTypesPlugin {
         if (!this.typedRoutes) return;
         const isApp = filePath.startsWith(this.appDir + _path.default.sep);
         // Filter out non-page files in app dir
-        if (isApp && !/[/\\]page\.[^.]+$/.test(filePath)) {
+        if (isApp && !/[/\\](?:page|route)\.[^.]+$/.test(filePath)) {
             return;
         }
         // Filter out non-page files in pages dir
@@ -306,7 +306,7 @@ class NextTypesPlugin {
             const relativePathToApp = _path.default.relative(this.appDir, mod.resource);
             const relativePathToRoot = _path.default.relative(this.dir, mod.resource);
             if (!this.dev) {
-                if (IS_PAGE) {
+                if (IS_PAGE || /[/\\]route\.[^.]+$/.test(mod.resource)) {
                     this.collectPage(mod.resource);
                 }
             }
@@ -341,7 +341,7 @@ class NextTypesPlugin {
                     chunkGroup.chunks.forEach((chunk)=>{
                         if (!chunk.name) return;
                         // Here we only track page chunks.
-                        if (!chunk.name.startsWith("pages/") && !(chunk.name.startsWith("app/") && chunk.name.endsWith("/page"))) {
+                        if (!chunk.name.startsWith("pages/") && !(chunk.name.startsWith("app/") && (chunk.name.endsWith("/page") || chunk.name.endsWith('/route')))) {
                             return;
                         }
                         const chunkModules = compilation.chunkGraph.getChunkModulesIterable(chunk);
diff --git a/dist/client/components/layout-router.js b/dist/client/components/layout-router.js
index 9b60a453b6195a3e070fd53a0d912812cd440fd8..340322d0d60d0cbf5dc83a798157e90ef1d7437e 100644
--- a/dist/client/components/layout-router.js
+++ b/dist/client/components/layout-router.js
@@ -317,6 +317,7 @@ function HandleRedirect({ redirect  }) {
     const router = (0, _navigation).useRouter();
     (0, _react).useEffect(()=>{
         router.replace(redirect, {});
+        router.refresh();
     }, [
         redirect,
         router
diff --git a/dist/client/link.js b/dist/client/link.js
index d15ce7f4d9324d2a1d37708eda57df6186177623..c1ead2c9c8a7c85f35ddd8fcee6bbc6417c85b72 100644
--- a/dist/client/link.js
+++ b/dist/client/link.js
@@ -83,6 +83,7 @@ function linkClicked(e, router, href, as, replace, shallow, scroll, locale, isAp
     if (isAppRouter) {
         // @ts-expect-error startTransition exists.
         _react.default.startTransition(navigate);
+        router.refresh();
     } else {
         navigate();
     }
diff --git a/dist/server/initialize-require-hook.js b/dist/server/initialize-require-hook.js
index 774f9e159750b9babac523a162c796546576f3ee..717b5e3fba1368f1c0aefc8c2528fd60460c388f 100644
--- a/dist/server/initialize-require-hook.js
+++ b/dist/server/initialize-require-hook.js
@@ -1,7 +1,7 @@
 "use strict";
 var _requireHook = require("../build/webpack/require-hook");
 (0, _requireHook).loadRequireHook();
-const isPrebundled = false;
+const isPrebundled = true;
 if (isPrebundled) {
     (0, _requireHook).overrideBuiltInReactPackages();
 }
diff --git a/dist/server/web/spec-extension/response.d.ts b/dist/server/web/spec-extension/response.d.ts
index 268f52b1f12c2f1bb9d71f7c51d8dd6cf3194ac8..2b6b94bd8b68338be31b89cdbee01d7e8dbee9b4 100644
--- a/dist/server/web/spec-extension/response.d.ts
+++ b/dist/server/web/spec-extension/response.d.ts
@@ -2,14 +2,15 @@ import type { I18NConfig } from '../../config-shared';
 import { NextURL } from '../next-url';
 import { ResponseCookies } from './cookies';
 declare const INTERNALS: unique symbol;
-export declare class NextResponse extends Response {
+export declare class NextResponse<B = void> extends Response {
     [INTERNALS]: {
         cookies: ResponseCookies;
         url?: NextURL;
+        B: B;
     };
     constructor(body?: BodyInit | null, init?: ResponseInit);
     get cookies(): ResponseCookies;
-    static json(body: any, init?: ResponseInit): NextResponse;
+    static json<T>(body: T, init?: ResponseInit): NextResponse<T>;
     static redirect(url: string | NextURL | URL, init?: number | ResponseInit): NextResponse;
     static rewrite(destination: string | NextURL | URL, init?: MiddlewareResponseInit): NextResponse;
     static next(init?: MiddlewareResponseInit): NextResponse;