import { Sql } from 'postgres';

const blogPosts = [
  {
    title: "Alice's first post (published)",
    textContent:
      "This is Alice's first post. It's published, so this is data that all logged-in users are allowed to view.",
    isPublished: true,
    userId: 1,
  },
  {
    title: "Alice's second post (unpublished)",
    textContent:
      "This is Alice's second post. It's not published, so this is private data that only Alice should be able to view and edit.",
    isPublished: false,
    userId: 1,
  },
  {
    title: "Alice's third post (published)",
    textContent:
      "This is Alice's third post. It's published, so this is data that all logged-in users are allowed to view.",
    isPublished: true,
    userId: 1,
  },
  {
    title: "Bob's first post (unpublished)",
    textContent:
      "This is Bob's first post. It's not published, so this is data only Bob should be able to view and edit.",
    isPublished: false,
    userId: 2,
  },
  {
    title: "Bob's second post (published)",
    textContent:
      "This is Bob's second post. It's published, so this is data that all logged-in users are allowed to view.",
    isPublished: true,
    userId: 2,
  },
  {
    title: "Bob's HTML post (published)",
    textContent:
      'This is Bob\'s blog post using <b>HTML</b> and an image: <img src="x" onerror="alert(\'pwned\')" />',
    isPublished: true,
    userId: 1,
  },
  {
    title: "Bob's Markdown post (published)",
    textContent:
      'This is Bob\'s blog post using **Markdown** and an image in HTML: <img src="x" onerror="alert(\'pwned\')" />',
    isPublished: true,
    userId: 1,
  },
];

export async function up(sql: Sql<Record<string, string>>) {
  await sql`
    CREATE TABLE IF NOT EXISTS blog_posts (
      id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
      title varchar(100) NOT NULL,
      text_content varchar(2000) NOT NULL,
      is_published boolean NOT NULL DEFAULT false,
      user_id integer NOT NULL REFERENCES users (id) ON DELETE CASCADE
    )
  `;

  for (const blogPost of blogPosts) {
    await sql`
      INSERT INTO blog_posts
        (title, text_content, is_published, user_id)
      VALUES
        (${blogPost.title}, ${blogPost.textContent}, ${blogPost.isPublished}, ${blogPost.userId})
    `;
  }
}

export async function down(sql: Sql<Record<string, string>>) {
  await sql`DROP TABLE blog_posts`;
}
